use kube::CustomResource;
use schemars::JsonSchema;

use crate::prelude::*;

/// Struct corresponding to the Specification (`spec`) part of the `TailoredApp` resource, directly
/// reflects context of the `deploy/crd.yaml` file to be found in this repository.
/// The `TailoredApp` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "cert-manager.io",
    version = "v1",
    kind = "Certificate",
    plural = "certificates",
    status = "Status",
    derive = "PartialEq",
    namespaced
)]
#[serde(rename_all = "camelCase")]
pub struct CertificateSpec {
    pub dns_names: Vec<String>,
    pub issuer_ref: IssuerRef,
    pub secret_name: String,
    pub usages: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema, Default)]
#[serde(rename_all = "camelCase")]
pub struct IssuerRef {
    pub group: String,
    pub kind: String,
    pub name: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema, Default)]
#[serde(rename_all = "camelCase")]
pub struct Status {
    pub conditions: Vec<Condition>,
    pub not_after: String,
    pub not_before: String,
    pub renewal_time: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[serde(rename_all = "camelCase")]
pub struct Condition {
    pub last_transition_time: String,
    pub message: String,
    pub observed_generation: i64,
    pub reason: String,
    pub status: String,
    #[serde(rename = "type")]
    pub type_field: String,
}
